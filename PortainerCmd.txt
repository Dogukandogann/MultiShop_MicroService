docker volume create portainer_data

docker run -d -p 8000:8000 -p 9000:9000 --name=portainer --restart=always -v /var/run/docker.sock:/var/run/docker.sock -v portainer_data:/data portainer/portainer-ce

		var client = _httpClientFactory.CreateClient();
			var content = new StringContent(JsonSerializer.Serialize(createLoginDto), Encoding.UTF8, "application/json");
			var response = await client.PostAsync("https://localhost:5001/api/Logins", content);
			if (response.IsSuccessStatusCode)
			{
				var jsonData = await response.Content.ReadAsStringAsync();
				var tokenModel = JsonSerializer.Deserialize<JwtResponseModel>(jsonData, new JsonSerializerOptions
				{
					PropertyNamingPolicy = JsonNamingPolicy.CamelCase
				});
				if (tokenModel is not null)
				{
					JwtSecurityTokenHandler hander = new JwtSecurityTokenHandler();
					var token = hander.ReadJwtToken(tokenModel.Token);
					var claims = token.Claims.ToList();

                    if (tokenModel.Token is not null)
                    {
						claims.Add(new Claim("MultiShopToken",tokenModel.Token));
						var claimsIdentity = new ClaimsIdentity(claims,JwtBearerDefaults.AuthenticationScheme);
						var authProps = new AuthenticationProperties{ 
						ExpiresUtc= tokenModel.ExpireDate,
						IsPersistent = true
						};
						await HttpContext.SignInAsync(JwtBearerDefaults.AuthenticationScheme,new ClaimsPrincipal(claimsIdentity),authProps);
						var id = _loginService.GetUserId;
						return RedirectToAction("Index","Default");
                    }
                }
			}